{"version":3,"sources":["api/gmail/gmail-client.js"],"names":["GET_Message","LIST_Messages","google","require","gmail","OAuth2","auth","credentials","oauth2Client","client_id","client_secret","redirect_uri","options","accessToken","setCredentials","access_token","resolve","reject","users","messages","get","err","email","list"],"mappings":";;;;;;;;;;QAegBA,W,GAAAA,W;QAkBAC,a,GAAAA,a;;;;AAjChB;;;;AAIA,IAAIC,SAASC,QAAQ,YAAR,CAAb;AACA,IAAIC,QAAQF,OAAOE,KAAP,CAAa,IAAb,CAAZ;AACA,IAAIC,SAASH,OAAOI,IAAP,CAAYD,MAAzB;AACA,IAAME,cAAcJ,QAAQ,uCAAR,CAApB;;AAEA,IAAIK,eAAe,IAAIH,MAAJ,CACjBE,YAAYE,SADK,EAEjBF,YAAYG,aAFK,EAGjBH,YAAYI,YAAZ,CAAyB,CAAzB,CAHiB,CAAnB;;AAMO,SAASX,WAAT,CAAqBY,OAArB,EAA8BC,WAA9B,EAA2C;;AAEhDL,eAAaM,cAAb,CAA4B;AACxBC,kBAAcF;AADU,GAA5B;;AAIAD,UAAQN,IAAR,GAAeE,YAAf;;AAEA,SAAO,sBAAY,UAAUQ,OAAV,EAAmBC,MAAnB,EAA0B;AAC3Cb,UAAMc,KAAN,CAAYC,QAAZ,CAAqBC,GAArB,CAAyBR,OAAzB,EAAkC,UAASS,GAAT,EAAcC,KAAd,EAAqB;AACrD,UAAID,GAAJ,EACEJ,OAAOI,GAAP,EADF,KAGEL,QAAQM,KAAR;AACH,KALD;AAMD,GAPM,CAAP;AAQD;;AAEM,SAASrB,aAAT,CAAuBW,OAAvB,EAAgCC,WAAhC,EAA6C;;AAElDL,eAAaM,cAAb,CAA4B;AACxBC,kBAAcF;AADU,GAA5B;;AAIAD,UAAQN,IAAR,GAAeE,YAAf;;AAEA,SAAO,sBAAY,UAAUQ,OAAV,EAAmBC,MAAnB,EAA0B;AAC3Cb,UAAMc,KAAN,CAAYC,QAAZ,CAAqBI,IAArB,CAA0BX,OAA1B,EAAmC,UAASS,GAAT,EAAcC,KAAd,EAAqB;AACtD,UAAID,GAAJ,EACEJ,OAAOI,GAAP,EADF,KAGEL,QAAQM,KAAR;AACH,KALD;AAMD,GAPM,CAAP;AAQD","file":"gmail-client.js","sourcesContent":["/**\n * Created by Carlos on 2/28/2017.\n */\n\nvar google = require('googleapis');\nvar gmail = google.gmail('v1');\nvar OAuth2 = google.auth.OAuth2;\nconst credentials = require('../../.credentials/google_credentials');\n\nvar oauth2Client = new OAuth2(\n  credentials.client_id,\n  credentials.client_secret,\n  credentials.redirect_uri[1]\n);\n\nexport function GET_Message(options, accessToken) {\n\n  oauth2Client.setCredentials({\n      access_token: accessToken\n  });\n\n  options.auth = oauth2Client;\n\n  return new Promise(function (resolve, reject){\n    gmail.users.messages.get(options, function(err, email) {\n      if (err)\n        reject(err);\n      else\n        resolve(email);\n    });\n  });\n}\n\nexport function LIST_Messages(options, accessToken) {\n\n  oauth2Client.setCredentials({\n      access_token: accessToken\n  });\n\n  options.auth = oauth2Client;\n\n  return new Promise(function (resolve, reject){\n    gmail.users.messages.list(options, function(err, email) {\n      if (err)\n        reject(err);\n      else\n        resolve(email);\n    });\n  });\n}\n\n"]}