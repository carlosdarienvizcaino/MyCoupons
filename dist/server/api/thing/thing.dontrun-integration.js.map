{"version":3,"sources":["api/thing/thing.dontrun-integration.js"],"names":["app","require","newThing","describe","things","beforeEach","done","get","expect","end","err","res","body","it","should","be","instanceOf","Array","post","send","name","info","equal","thing","_id","afterEach","updatedThing","put","patchedThing","patch","op","path","value","delete"],"mappings":"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","file":"thing.dontrun-integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newThing;\n\ndescribe('Thing API:', function() {\n  describe('GET /api/things', function() {\n    var things;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/things')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          things = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      things.should.be.instanceOf(Array);\n    });\n  });\n\n  describe('POST /api/things', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/things')\n        .send({\n          name: 'New Thing',\n          info: 'This is the brand new thing!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          newThing = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created thing', function() {\n      newThing.name.should.equal('New Thing');\n      newThing.info.should.equal('This is the brand new thing!!!');\n    });\n  });\n\n  describe('GET /api/things/:id', function() {\n    var thing;\n\n    beforeEach(function(done) {\n      request(app)\n        .get(`/api/things/${newThing._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          thing = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      thing = {};\n    });\n\n    it('should respond with the requested thing', function() {\n      thing.name.should.equal('New Thing');\n      thing.info.should.equal('This is the brand new thing!!!');\n    });\n  });\n\n  describe('PUT /api/things/:id', function() {\n    var updatedThing;\n\n    beforeEach(function(done) {\n      request(app)\n        .put(`/api/things/${newThing._id}`)\n        .send({\n          name: 'Updated Thing',\n          info: 'This is the updated thing!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          updatedThing = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedThing = {};\n    });\n\n    it('should respond with the updated thing', function() {\n      updatedThing.name.should.equal('Updated Thing');\n      updatedThing.info.should.equal('This is the updated thing!!!');\n    });\n\n    it('should respond with the updated thing on a subsequent GET', function(done) {\n      request(app)\n        .get(`/api/things/${newThing._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          let thing = res.body;\n\n          thing.name.should.equal('Updated Thing');\n          thing.info.should.equal('This is the updated thing!!!');\n\n          done();\n        });\n    });\n  });\n\n  describe('PATCH /api/things/:id', function() {\n    var patchedThing;\n\n    beforeEach(function(done) {\n      request(app)\n        .patch(`/api/things/${newThing._id}`)\n        .send([\n          { op: 'replace', path: '/name', value: 'Patched Thing' },\n          { op: 'replace', path: '/info', value: 'This is the patched thing!!!' }\n        ])\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          patchedThing = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      patchedThing = {};\n    });\n\n    it('should respond with the patched thing', function() {\n      patchedThing.name.should.equal('Patched Thing');\n      patchedThing.info.should.equal('This is the patched thing!!!');\n    });\n  });\n\n  describe('DELETE /api/things/:id', function() {\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete(`/api/things/${newThing._id}`)\n        .expect(204)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when thing does not exist', function(done) {\n      request(app)\n        .delete(`/api/things/${newThing._id}`)\n        .expect(404)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n  });\n});\n"]}