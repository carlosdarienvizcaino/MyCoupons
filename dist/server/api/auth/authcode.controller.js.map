{"version":3,"sources":["api/auth/authcode.controller.js"],"names":["google","require","googleOAuth2","auth","OAuth2","GoogleAuth","credentials","oauth2Client","client_id","client_secret","redirect_uri","client","module","exports","req","res","authorizationCode","body","authCode","getToken","err","tokens","console","log","status","code","send","setCredentials","idToken","id_token","verifyIdToken","login","payload","getPayload","resBody","sub","access_token"],"mappings":";;AACA,IAAIA,SAASC,QAAQ,YAAR,CAAb;AACA,IAAIC,eAAeF,OAAOG,IAAP,CAAYC,MAA/B;;AAEA,IAAIC,aAAaJ,QAAQ,qBAAR,CAAjB;AACA,IAAIE,OAAO,IAAIE,UAAJ,EAAX;;AAEA,IAAMC,cAAcL,QAAQ,uCAAR,CAApB;;AAEA,IAAIM,eAAe,IAAIL,YAAJ,CACfI,YAAYE,SADG,EAEfF,YAAYG,aAFG;AAGf;AACAH,YAAYI,YAAZ,CAAyB,CAAzB,CAJe,CAAnB;AAMA,IAAIC,SAAS,IAAIR,KAAKC,MAAT,CAAgBE,YAAYE,SAA5B,EAAuC,EAAvC,EAA2C,EAA3C,CAAb;;AAEAI,OAAOC,OAAP,GAAiB,UAASC,GAAT,EAAcC,GAAd,EAAkB;;AAEjC,MAAIC,oBAAoBF,IAAIG,IAAJ,CAASC,QAAjC;;AAEAX,eAAaY,QAAb,CAAsBH,iBAAtB,EAAyC,UAAUI,GAAV,EAAeC,MAAf,EAAuB;;AAE9D,QAAID,GAAJ,EAAQ;AACNE,cAAQC,GAAR,CAAY,yDAAyDP,iBAArE;AACAM,cAAQC,GAAR,CAAYH,GAAZ;AACAL,UAAIS,MAAJ,CAAWJ,IAAIK,IAAf,EAAqBC,IAArB,CAA0BN,GAA1B;AACD;AACD;AALA,SAMK;AACHb,qBAAaoB,cAAb,CAA4BN,MAA5B;AACA,YAAIO,UAAUP,OAAOQ,QAArB;;AAEAlB,eAAOmB,aAAP,CAAqBF,OAArB,EAA6BtB,YAAYE,SAAzC,EAAqD,UAASY,GAAT,EAAcW,KAAd,EAAqB;AACxE,cAAIX,GAAJ,EAAQ;AACN;AACAL,gBAAIS,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB,gCAAgCN,GAArD;AACD,WAHD,MAIK;AACH;AACA,gBAAIY,UAAUD,MAAME,UAAN,EAAd;AACA,gBAAIC,UAAU;AACZC,mBAAKH,QAAQ,KAAR,CADO;AAEZI,4BAAcf,OAAO,cAAP;AAFF,aAAd;AAIAN,gBAAIS,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBQ,OAArB;AACD;AACF,SAdD;AAeD;AACF,GA5BD;AA6BD,CAjCD","file":"authcode.controller.js","sourcesContent":["\nvar google = require('googleapis');\nvar googleOAuth2 = google.auth.OAuth2;\n\nvar GoogleAuth = require('google-auth-library');\nvar auth = new GoogleAuth;\n\nconst credentials = require('../../.credentials/google_credentials');\n\nvar oauth2Client = new googleOAuth2(\n    credentials.client_id,\n    credentials.client_secret,\n    // 'postmessage' for redirect_uri\n    credentials.redirect_uri[0]\n);\nvar client = new auth.OAuth2(credentials.client_id, '', '');\n\nmodule.exports = function(req, res){\n\n  var authorizationCode = req.body.authCode;\n\n  oauth2Client.getToken(authorizationCode, function (err, tokens) {\n\n    if (err){\n      console.log(\"ERROR: Getting access token with authorizationCode: \" + authorizationCode);\n      console.log(err);\n      res.status(err.code).send(err);\n    }\n    // Now tokens contains an access_token and an optional refresh_token. Save them.\n    else {\n      oauth2Client.setCredentials(tokens);\n      var idToken = tokens.id_token;\n\n      client.verifyIdToken(idToken,credentials.client_id , function(err, login) {\n        if (err){\n          /*TODO @carlosv: what should be done when authentication fails*/\n          res.status(403).send(\"TOKEN AUTHENTICATION ERROR:\" + err);\n        }\n        else {\n          /*TODO @carlosv check aud to match one of the app's client id*/\n          var payload = login.getPayload();\n          var resBody = {\n            sub: payload['sub'],\n            access_token: tokens['access_token']\n          }\n          res.status(200).send(resBody);\n        }\n      });\n    }\n  });\n}\n\n\n\n\n"]}